{"version":3,"sources":["Header.js","candle.js","stage.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","Candle","state","class","Stage","App","act","className","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAceA,G,6KATP,OACI,gCACI,0DACA,sG,GALKC,cCuBNC,E,kDAvBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,GAFJ,E,qDAOT,OACE,6BACE,yBAAKC,MAAM,UAET,yBAAKA,MAAM,UACT,yBAAKA,MAAM,kBACX,yBAAKA,MAAM,WACX,yBAAKA,MAAM,SACX,yBAAKA,MAAM,iB,GAhBNH,a,gBCiBNI,E,kDAfX,aAAe,IAAD,8BACV,gBACKF,MAAQ,GAFH,E,qDAOV,OACI,6BACI,kBAAC,IAAD,W,GAVIF,uBC0DLK,E,kDArDb,aAAe,IAAD,8BACZ,gBACKH,MAAO,CACVI,IAAK,GAHK,E,qDAQZ,OACE,yBAAKC,UAAU,OACb,yBAAKC,GAAG,UACR,yBAAKA,GAAG,WACR,yBAAKA,GAAG,WACR,kBAAC,EAAD,MACA,yBAAKD,UAAU,SACb,oDAEF,kBAAC,EAAD,MA8BA,kBAAC,EAAD,W,GAhDUP,aCKES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c5941d8b.chunk.js","sourcesContent":["// Header\nimport React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                <h1>✧Tarot Universe✧</h1>\n                <span>Call upon the universe for insight and take a moment to reflect</span>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Candle extends Component {\n    constructor(){\n        super();\n        this.state = {\n\n        }\n    }\n    render() {\n        return (\n          <div>\n            <div class=\"holder\">\n              {/* <!-- html/css for candle was taken and adapted from https://www.youtube.com/watch?v=W3HwYLZEoCI  --> */}\n              <div class=\"candle\">\n                <div class=\"blinking-glow\"></div>\n                <div class=\"thread\"></div>\n                <div class=\"glow\"></div>\n                <div class=\"flame\"></div>\n              </div>\n            </div>\n          </div>\n        );\n    }\n}\n\nexport default Candle;","import React, { Component } from 'react';\nimport Stage3 from './stage3'\n\nclass Stage extends Component () {\n    constructor() {\n        super();\n        this.state = {\n\n        }\n    }\n    render () {\n        return(\n            <div>\n                <Stage3 />\n            </div>\n        )\n    }\n}\n\nexport default Stage;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './Header';\nimport Candle from './candle';\nimport Stage from './stage'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state= {\n      act: 3,\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"stars\"></div>\n        <div id=\"stars2\"></div>\n        <div id=\"stars3\"></div>\n        <Header />\n        <div className=\"stage\">\n          <span>This is the stage</span>\n        </div>\n        <Stage />\n\n        {/* <div class=\"stage stage1\">\n          <span>stage1: Hey heres the description</span> */}\n        {/* <!-- intro & first descripion --> */}\n        {/* <!-- header big --> */}\n        {/* <!-- start button --> */}\n        {/* </div> */}\n        {/* <div class=\"stage stage2\">\n          <span>\n            stage2: Set the scene here's a little blurb that helps you get into\n            the right mindset and think about what you're looking for\n          </span> */}\n        {/* <!-- header smaller -->\n            <!-- set scene  -->\n             */}\n        {/* <div></div>\n        </div>\n        <div class=\"stage stage3\">\n          <span>stage3: descripion about </span> */}\n        {/* <!-- pick 3 cards/ 3 cards layed out -->\n            <!-- modal for each card -->\n                <!-- modal had card title, picture, description -->\n            <!-- modal  -->\n            <!-- end button  --> */}\n        {/* </div>\n        <div class=\"stage stage4\">\n          <span>stage4 </span> */}\n        {/* <!-- so mote it be --> */}\n        {/* </div> */}\n        <Candle />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}